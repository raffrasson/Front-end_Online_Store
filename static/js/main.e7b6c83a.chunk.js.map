{"version":3,"sources":["components/CartButton.jsx","components/AddCartButton.jsx","services/api.js","components/Search.jsx","components/Cart.jsx","components/ProductDetails.jsx","App.js","serviceWorker.js","index.js"],"names":["CartButton","to","data-testid","React","Component","AddCartButton","addItem","bind","product","this","props","quantity","list","localStorage","cartItems","productList","JSON","parse","push","stringify","dataTestId","type","value","onClick","defaultProps","getCategories","a","fetch","json","getProductsFromCategoryAndQuery","categoryId","query","url","getProductById","id","result","descriptionResult","plain_text","itemDescription","Search","pegarCategorias","categories","setState","isLoading","getProduct","isLoadingProducts","state","inputSearch","category","products","results","handleChange","event","preventDefault","target","name","handleClick","renderProducts","map","title","thumbnail","price","cat","category_id","key","replace","src","alt","placeholder","onChange","renderCategories","Cart","cart","getCartItems","productCard","index","length","ProductDetails","match","params","idSearch","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAaeA,E,uKARX,OACE,kBAAC,IAAD,CAAMC,GAAG,QAAQC,cAAY,wBAA7B,gB,GAHmBC,IAAMC,W,QCAzBC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,QAAU,EAAKA,QAAQC,KAAb,gBAFH,E,sDAKH,IACDC,EAAYC,KAAKC,MAAjBF,QACRA,EAAQG,SAAWH,EAAQG,UAAY,EACvC,IAAMC,EAAOC,aAAaC,UACtBC,EAAc,GACdH,IAAMG,EAAcC,KAAKC,MAAML,IACnCG,EAAYG,KAAKV,GACjBK,aAAaC,UAAYE,KAAKG,UAAUJ,K,+BAGhC,IACAK,EAAeX,KAAKC,MAApBU,WACR,OACE,2BACEC,KAAK,SACLC,MAAM,6BACNpB,cAAckB,EACdG,QAAUd,KAAKH,c,GAvBKH,IAAMC,WAoClCC,EAAcmB,aAAe,CAC3BhB,QAAS,CACPG,SAAU,GAEZS,WAAY,IAGCf,QC9CR,SAAeoB,IAAtB,+B,4CAAO,sBAAAC,EAAA,sEACSC,MAAM,qDADf,uCACqEC,QADrE,4C,sBAIA,SAAeC,EAAtB,oC,4CAAO,WAA+CC,EAAYC,GAA3D,eAAAL,EAAA,6DACCM,EADD,iEACiEF,EADjE,cACiFC,GADjF,SAESJ,MAAMK,GAFf,uCAEqBJ,QAFrB,4C,sBAKA,SAAeK,EAAtB,kC,4CAAO,WAA8BC,GAA9B,mBAAAR,EAAA,6DACCM,EADD,6CAC6CE,GAD7C,SAEuBP,MAAMK,GAF7B,8BAEmCJ,OAFnC,cAECO,EAFD,gBAGmCR,MAAM,GAAD,OAAIK,EAAJ,iBAHxC,+BAGgEJ,OAHhE,eAGCQ,EAHD,OAGwEC,WAC7EF,EAAOG,gBAAkBF,EAJpB,kBAKED,GALF,6C,0BCkHQI,E,kDApHb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IAeR8B,gBAhBmB,sBAgBD,4BAAAd,EAAA,sEACSD,IADT,OACVgB,EADU,OAEhB,EAAKC,SAAS,CAAED,aAAYE,WAAW,IAFvB,2CAhBC,EAqBnBC,WArBmB,sBAqBN,kCAAAlB,EAAA,6DACX,EAAKgB,SAAS,CAAEG,mBAAmB,IADxB,EAEuB,EAAKC,MAA/BC,EAFG,EAEHA,YAAaC,EAFV,EAEUA,SAFV,SAGYnB,EAAgCmB,EAAUD,GAHtD,OAGLE,EAHK,OAIX,EAAKP,SAAS,CAAEO,SAAUA,EAASC,QAASL,mBAAmB,IAJpD,2CArBM,EA4BnBM,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKX,SAAL,eAAiBU,EAAME,OAAOC,KAAOH,EAAME,OAAOhC,SA9BjC,EAiCnBkC,YAjCmB,uCAiCL,WAAOJ,GAAP,SAAA1B,EAAA,6DACZ,EAAKgB,SAAL,eAAiBU,EAAME,OAAOC,KAAOH,EAAME,OAAOpB,KADtC,SAENkB,EAAMC,iBAFA,OAGZ,EAAKT,aAHO,2CAjCK,wDA0DnBa,eAAiB,WAAO,IACdR,EAAa,EAAKH,MAAlBG,SACR,OACE,6BACGA,EAASS,KAAI,SAAClD,GAAa,IAClB0B,EAAwD1B,EAAxD0B,GAAWqB,EAA6C/C,EAApDmD,MAAaC,EAAuCpD,EAAvCoD,UAAWC,EAA4BrD,EAA5BqD,MAAoBC,EAAQtD,EAArBuD,YAC3C,OACE,yBAAKC,IAAM9B,GACT,kBAAC,IAAD,CACEjC,GAAE,mBAAe6D,EAAf,YAAsBP,EAAKU,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAzD,YAAgE/B,GAClEhC,cAAY,uBAEZ,yBAAKA,cAAY,WACf,yBAAKgE,IAAMN,EAAYO,IAAI,sBAC3B,2BAAIZ,GACJ,wCAAUM,MAGd,kBAAC,EAAD,CAAerD,QAAUA,EAAUY,WAAW,8BA1ExD,EAAK0B,MAAQ,CACXL,WAAY,GACZO,SAAU,GACVC,SAAU,GACVN,WAAW,EACXE,mBAAmB,EACnBE,YAAa,IARE,E,gEAajBtC,KAAK+B,oB,yCA0Ba,IAAD,OACTC,EAAehC,KAAKqC,MAApBL,WACR,OACE,6BACGA,EAAWiB,KAAI,SAACI,GAAD,OACd,2BACEE,IAAMF,EAAI5B,GACVA,GAAK4B,EAAI5B,GACThC,cAAY,WACZqD,KAAK,WACLhC,QAAU,EAAKiC,YACflC,MAAQwC,EAAIP,KACZlC,KAAK,iB,+BAiCL,IAAD,EAC+CZ,KAAKqC,MAAnDH,EADD,EACCA,UAAWI,EADZ,EACYA,YAAaF,EADzB,EACyBA,kBAChC,OACE,6BACE,uBAAG3C,cAAY,wBAAf,4DAGA,8BACE,2BACEmB,KAAK,OACL+C,YAAY,gBACZb,KAAK,cACLjC,MAAQyB,EACRsB,SAAW5D,KAAK0C,aAChBjD,cAAY,gBAEd,4BACEmB,KAAK,SACLnB,cAAY,eACZqB,QAAUd,KAAKmC,YAHjB,cAQF,kBAAC,EAAD,MACCD,EAAY,KAAOlC,KAAK6D,mBACxBzB,EAAoB,KAAOpC,KAAKgD,sB,GA/GpBtD,IAAMC,WCsCZmE,E,kDAzCb,aAAe,IAAD,8BACZ,gBACKzB,MAAQ,CACX0B,KAAM,IAER,EAAKC,aAAe,EAAKA,aAAalE,KAAlB,gBACpB,EAAKmE,YAAc,EAAKA,YAAYnE,KAAjB,gBANP,E,gEAUZE,KAAKgE,iB,qCAGS,IACN3D,EAAcD,aAAdC,UACJA,GAAWL,KAAKiC,SAAS,CAAE8B,KAAMxD,KAAKC,MAAMH,O,kCAGtCN,EAASmE,GAAQ,IACnBhB,EAAoBnD,EAApBmD,MAAOhD,EAAaH,EAAbG,SACf,OACE,yBAAKqD,IAAG,UAAML,EAAN,YAAegB,IACrB,uBAAGzE,cAAY,8BAA8ByD,GAC7C,8CACA,0BAAMzD,cAAY,kCAAkCS,M,+BAKhD,IAAD,OACC6D,EAAS/D,KAAKqC,MAAd0B,KACR,OACE,iCACmB,IAAhBA,EAAKI,OACF,uBAAG1E,cAAY,+BAAf,8BACAsE,EAAKd,KAAI,SAAClD,EAASmE,GAAV,OAAoB,EAAKD,YAAYlE,EAASmE,W,GApChDxE,IAAMC,WCoDVyE,E,kDA/Cb,WAAYnE,GAAQ,IAAD,8BACjB,cAAMA,IACDoC,MAAQ,CACXtC,QAAS,IAEX,EAAKoC,WAAa,EAAKA,WAAWrC,KAAhB,gBALD,E,gEASjBE,KAAKmC,e,sKAIkDnC,KAAKC,MAApDoE,MAASC,OAAU/B,E,EAAAA,SAAUW,E,EAAAA,MAAOzB,E,EAAAA,G,SACtBL,EAAgCmB,EAAUW,G,UAA1DxB,E,OAAkEe,QAAQ,GAC1E8B,EAAW/C,EAAeC,GAC5BC,EAAOD,KAAOA,E,yCACTzB,KAAKiC,SAAS,CAAElC,QAAS2B,K,mBAElC1B,K,UAA+BuE,E,0BAAfxE,Q,WAAXkC,S,sJAGG,IACAlC,EAAYC,KAAKqC,MAAjBtC,QACAmD,EAA6CnD,EAA7CmD,MAAOE,EAAsCrD,EAAtCqD,MAAOD,EAA+BpD,EAA/BoD,UAAWtB,EAAoB9B,EAApB8B,gBACjC,OACE,6BACE,kBAAC,EAAD,MACA,uBAAGpC,cAAY,uBAAuByD,GACtC,2BAAIE,GACJ,yBAAKK,IAAMN,EAAYO,IAAMR,IAC5BrB,EAAkB,2BAAIA,GAAuB,KAC9C,kBAAC,EAAD,CAAe9B,QAAUA,EAAUY,WAAW,oC,GAjCzBjB,IAAMC,WCYpB6E,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAY7C,IAClC,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,QAAQC,UAAYb,IACtC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,gCAAgCC,UAAYP,OCAlDQ,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MAC1B,2DCZNW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7b6c83a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass CartButton extends React.Component {\n  render() {\n    return (\n      <Link to=\"/cart\" data-testid=\"shopping-cart-button\">\n        Carrinho\n      </Link>\n    );\n  }\n}\n\nexport default CartButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddCartButton extends React.Component {\n  constructor() {\n    super();\n    this.addItem = this.addItem.bind(this);\n  }\n\n  addItem() {\n    const { product } = this.props;\n    product.quantity = product.quantity || 1;\n    const list = localStorage.cartItems;\n    let productList = [];\n    if (list) productList = JSON.parse(list);\n    productList.push(product);\n    localStorage.cartItems = JSON.stringify(productList);\n  }\n\n  render() {\n    const { dataTestId } = this.props;\n    return (\n      <input\n        type=\"button\"\n        value=\"Adicionar item no carrinho\"\n        data-testid={ dataTestId }\n        onClick={ this.addItem }\n      />\n    );\n  }\n}\n\nAddCartButton.propTypes = {\n  product: PropTypes.shape({\n    quantity: PropTypes.number,\n  }),\n  dataTestId: PropTypes.string,\n};\n\nAddCartButton.defaultProps = {\n  product: {\n    quantity: 1,\n  },\n  dataTestId: '',\n};\n\nexport default AddCartButton;\n","export async function getCategories() {\n  return (await fetch('https://api.mercadolibre.com/sites/MLB/categories')).json();\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const url = `https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`;\n  return (await fetch(url)).json();\n}\n\nexport async function getProductById(id) {\n  const url = `https://api.mercadolibre.com/items/${id}`;\n  const result = await (await fetch(url)).json();\n  const descriptionResult = (await (await fetch(`${url}/description`)).json()).plain_text;\n  result.itemDescription = descriptionResult;\n  return result;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport CartButton from './CartButton';\nimport AddCartButton from './AddCartButton';\nimport { getCategories, getProductsFromCategoryAndQuery } from '../services/api';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [],\n      category: '',\n      products: [],\n      isLoading: true,\n      isLoadingProducts: false,\n      inputSearch: '',\n    };\n  }\n\n  componentDidMount() {\n    this.pegarCategorias();\n  }\n\n  pegarCategorias = async () => {\n    const categories = await getCategories();\n    this.setState({ categories, isLoading: false });\n  }\n\n  getProduct = async () => {\n    this.setState({ isLoadingProducts: true });\n    const { inputSearch, category } = this.state;\n    const products = await getProductsFromCategoryAndQuery(category, inputSearch);\n    this.setState({ products: products.results, isLoadingProducts: false });\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleClick = async (event) => {\n    this.setState({ [event.target.name]: event.target.id });\n    await event.preventDefault();\n    this.getProduct();\n  }\n\n  renderCategories() {\n    const { categories } = this.state;\n    return (\n      <div>\n        {categories.map((cat) => (\n          <input\n            key={ cat.id }\n            id={ cat.id }\n            data-testid=\"category\"\n            name=\"category\"\n            onClick={ this.handleClick }\n            value={ cat.name }\n            type=\"button\"\n          />\n        ))}\n      </div>\n    );\n  }\n\n  renderProducts = () => {\n    const { products } = this.state;\n    return (\n      <div>\n        {products.map((product) => {\n          const { id, title: name, thumbnail, price, category_id: cat } = product;\n          return (\n            <div key={ id }>\n              <Link\n                to={ `/product/${cat}/${name.replace('%', '').replace('/', '')}/${id}` }\n                data-testid=\"product-detail-link\"\n              >\n                <div data-testid=\"product\">\n                  <img src={ thumbnail } alt=\"imagem do produto\" />\n                  <p>{name}</p>\n                  <p>{`R$:${price}`}</p>\n                </div>\n              </Link>\n              <AddCartButton product={ product } dataTestId=\"product-add-to-cart\" />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { isLoading, inputSearch, isLoadingProducts } = this.state;\n    return (\n      <div>\n        <p data-testid=\"home-initial-message\">\n          Digite algum termo de pesquisa ou escolha uma categoria.\n        </p>\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Pesquisa Aqui\"\n            name=\"inputSearch\"\n            value={ inputSearch }\n            onChange={ this.handleChange }\n            data-testid=\"query-input\"\n          />\n          <button\n            type=\"button\"\n            data-testid=\"query-button\"\n            onClick={ this.getProduct }\n          >\n            Pesquisar\n          </button>\n        </form>\n        <CartButton />\n        {isLoading ? null : this.renderCategories()}\n        {isLoadingProducts ? null : this.renderProducts()}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\n\nclass Cart extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cart: [],\n    };\n    this.getCartItems = this.getCartItems.bind(this);\n    this.productCard = this.productCard.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCartItems();\n  }\n\n  getCartItems() {\n    const { cartItems } = localStorage;\n    if (cartItems) this.setState({ cart: JSON.parse(cartItems) });\n  }\n\n  productCard(product, index) {\n    const { title, quantity } = product;\n    return (\n      <div key={ `${title}-${index}` }>\n        <p data-testid=\"shopping-cart-product-name\">{title}</p>\n        <span>Quantidade: </span>\n        <span data-testid=\"shopping-cart-product-quantity\">{quantity}</span>\n      </div>\n    );\n  }\n\n  render() {\n    const { cart } = this.state;\n    return (\n      <section>\n        {cart.length === 0\n          ? <p data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</p>\n          : cart.map((product, index) => this.productCard(product, index))}\n      </section>\n    );\n  }\n}\n\nexport default Cart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AddCartButton from './AddCartButton';\nimport CartButton from './CartButton';\nimport { getProductsFromCategoryAndQuery, getProductById } from '../services/api';\n\nclass ProductDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: {},\n    };\n    this.getProduct = this.getProduct.bind(this);\n  }\n\n  componentDidMount() {\n    this.getProduct();\n  }\n\n  async getProduct() {\n    const { match: { params: { category, title, id } } } = this.props;\n    const result = (await getProductsFromCategoryAndQuery(category, title)).results[0];\n    const idSearch = getProductById(id);\n    if (result.id === id) {\n      return this.setState({ product: result });\n    }\n    this.setState({ product: await idSearch });\n  }\n\n  render() {\n    const { product } = this.state;\n    const { title, price, thumbnail, itemDescription } = product;\n    return (\n      <div>\n        <CartButton />\n        <p data-testid=\"product-detail-name\">{title}</p>\n        <p>{price}</p>\n        <img src={ thumbnail } alt={ title } />\n        {itemDescription ? <p>{itemDescription}</p> : null }\n        <AddCartButton product={ product } dataTestId=\"product-detail-add-to-cart\" />\n      </div>\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  match: PropTypes.shape({ params: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n  }).isRequired,\n};\n\nexport default ProductDetails;\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport Search from './components/Search';\nimport Cart from './components/Cart';\nimport ProductDetails from './components/ProductDetails';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ Search } />\n        <Route exact path=\"/cart\" component={ Cart } />\n        <Route exact path=\"/product/:category/:title/:id\" component={ ProductDetails } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}